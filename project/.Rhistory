c0 <- c0 + (data[t] - m)^2
}
c0 <- c0/n
ck <- ck/n
return(ck/c0)
}
auto.correlation(chicken$BUDAPEST, length(chicken$BUDAPEST), 1)
acf(chicken$BUDAPEST, pl=FALSE)
auto.correlation(chicken$BUDAPEST, length(chicken$BUDAPEST), 5)
acf(chicken$BUDAPEST, pl=FALSE)[5]
sapply( 1:27, auto.correlation(chicken$BUDAPEST, length(chicken$BUDAPEST), i)
)
sapply( 1:27, auto.correlation(chicken$BUDAPEST, length(chicken$BUDAPEST)) )
sapply( 1:27, auto.correlation, data=chicken$BUDAPEST, n=length(chicken$BUDAPEST) )
acf(chicken$BUDAPEST, pl=FALSE)
sapply( 0:27, auto.correlation, data=chicken$BUDAPEST, n=length(chicken$BUDAPEST) )
acf(chicken$BUDAPEST, pl=FALSE)
auto.cor.results <- sapply( 0:27, auto.correlation, data=chicken$BUDAPEST, n=length(chicken$BUDAPEST) )
plot(auto.cor.results)
sapply( 0:27, auto.correlation, data=chicken$BUDAPEST, n=length(chicken$BUDAPEST) )
acf(csr3$IF)
acf(csr3$IF, pl=FALSE)
library(readxl)
setwd("/Users/shadow/OneDrive - University of Tulsa/classes/Independent Study - Time Series/time-series-independent-study/project")
read_excel("./example_failure_data_sets.xlsx", sheet = "CSR3")
lwr <- function(data, window.size=10, step.size=5, degree=1){
# print( (length(x) - window.size + 1))
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
models
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
length(df$x)
lwr(df, degree=2)
models
result <- lwr(df, degree=2)
result
result[1,]
result[,1]
params = rep(0, 3)
params
params = rep(0, degree+1)
params = rep(0, 1+1)
params
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), models[,d])
params[d] <- tail(predict.lm(mod, seq(length(data[,1]), length(data[,1]) + window.size) ), n=1)
}
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
length(df$x)
result <- lwr(df, degree=2)
models
result
result[,1]
dat <- data.frame("x" = seq(1,3), "y" = result[,1])
dat
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,degree +1), "y" = models[,d])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
params[d] <- tail(predict.lm(mod, seq(degree+1, degree+2) ), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
length(df$x)
result <- lwr(df, degree=2)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,degree +1), "y" = models[,d])
print(dat)
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
params[d] <- tail(predict.lm(mod, seq(degree+1, degree+2) ), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
length(df$x)
result <- lwr(df, degree=2)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,degree +1), "y" = models[,d])
print(dat)
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
print(seq(degree+1, degree+2))
params[d] <- tail(predict.lm(mod, seq(degree+1, degree+2) ), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
length(df$x)
result <- lwr(df, degree=2)
dat <- data.frame("x" = seq(degree+1, degree+2))
?predict.lm
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,degree +1), "y" = models[,d])
print(dat)
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
print(seq(degree+1, degree+2))
dat <- data.frame("x" = seq(degree+1, degree+2))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
length(df$x)
result <- lwr(df, degree=2)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,degree +1), "y" = models[,d])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(degree+1, degree+2))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
length(df$x)
result <- lwr(df, degree=2)
result
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,degree +1), "y" = models[,d])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(degree+1, degree+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
# length(df$x)
result <- lwr(df, degree=2)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[,1])), "y" = models[,d])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(length(models[,1])+1, degree+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,20), "y" = seq(1,20))
# length(df$x)
result <- lwr(df, degree=2)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
print(models)
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[,1])), "y" = models[,d])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(length(models[,1])+1, degree+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
# length(df$x)
result <- lwr(df, degree=2)
df <- data.frame("x" = seq(1,20), "y" = seq(2,40, 2))
# length(df$x)
result <- lwr(df, degree=2)
df <- data.frame("x" = seq(1,40), "y" = seq(2,80, 2))
# length(df$x)
result <- lwr(df, degree=2)
result
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
print(models)
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[,1])), "y" = models[d,])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(length(models[,1])+1, degree+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,40), "y" = seq(2,80, 2))
# length(df$x)
result <- lwr(df, degree=2)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
print(models)
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[1,])), "y" = models[d,])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(length(models[1,])+1, length(models[1,])+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,40), "y" = seq(2,80, 2))
# length(df$x)
result <- lwr(df, degree=2)
print(dat)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
print(models)
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[1,])), "y" = models[d,])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
print(dat)
dat <- data.frame("x" = seq(length(models[1,])+1, length(models[1,])+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,40), "y" = seq(2,80, 2))
# length(df$x)
result <- lwr(df, degree=2)
dat <- data.frame("x" = seq(1,length(models[1,])), "y" = models[d,])
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), ncol=length(seq(window.size, length(data$x), step.size)), nrow=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[,count] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
print(models)
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[1,])), "y" = models[d,])
print(dat)
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
print(dat)
dat <- data.frame("x" = seq(length(models[1,])+1, length(models[1,])+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
# length(df$x)
result <- lwr(df, degree=2)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), nrow=length(seq(window.size, length(data$x), step.size)), ncol=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[count,] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
print(models)
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[,1])), "y" = models[,d])
print(dat)
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
print(dat)
dat <- data.frame("x" = seq(length(models[,1])+1, length(models[,1])+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
# length(df$x)
result <- lwr(df, degree=2)
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), nrow=length(seq(window.size, length(data$x), step.size)), ncol=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[count,] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
print(models)
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[,1])), "y" = models[,d])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(length(models[,1])+1, length(models[,1])+2))
print(predict.lm(mod,  dat))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
result <- lwr(df, degree=2)
# length(df$x)
result <- lwr(df, degree=1)
result
result <- lwr(df, degree=2)
result
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), nrow=length(seq(window.size, length(data$x), step.size)), ncol=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[count,] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[,1])), "y" = models[,d])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(length(models[,1])+1, length(models[,1])+2))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,40), "y" = seq(2,80, 2))
# length(df$x)
result <- lwr(df, degree=2)
result
# install.packages("readxl")
library(readxl)
setwd("/Users/shadow/OneDrive - University of Tulsa/classes/Independent Study - Time Series/time-series-independent-study/project")
read_excel("./example_failure_data_sets.xlsx", sheet = "CSR3")
lwr <- function(data, window.size=10, step.size=5, degree=1, predicting.degree=NA){
if(is.na(predicting.degree)){
predicting.degree=degree
}
#fit local regression models in a sliding window fasion
dat<- rep(0, (length(data$x) - window.size + 1))
models <- data.frame(matrix(vector(), nrow=length(seq(window.size, length(data$x), step.size)), ncol=degree +1) )
count = 1
for(i in seq(window.size, length(data$x), step.size)){
models[count,] <- lm(y~poly(x, degree=degree, raw=TRUE), data[(i-window.size+ 1):i,])$coeff
count <- count + 1
}
#fit a model to the params of the sliding window models
params = rep(0, degree+1)
for(d in seq(degree + 1) ){
dat <- data.frame("x" = seq(1,length(models[,1])), "y" = models[,d])
mod <- lm(y~poly(x, degree=predicting.degree, raw=TRUE), dat)
dat <- data.frame("x" = seq(length(models[,1])+1, length(models[,1])+2))
params[d] <- tail(predict.lm(mod,  dat), n=1)
}
return(params)
}
df <- data.frame("x" = seq(1,40), "y" = seq(2,80, 2))
# length(df$x)
result <- lwr(df, degree=2)
result
